summary(lm_model_2)
coef2 <- lm_model_2$coef
Pitching_Data_2021 <- Pitching_Data_2021 %>%
mutate(exp_ERA = coef[1] + (coef[2] * K_per_9) + (coef[3] * BB_per_9) + (coef[4] * BABIP) + (coef[5] * HR_per_FB))
View(Pitching_Data_2021)
Pitching_Data_2021 <- Pitching_Data_2021 %>%
mutate(exp_ERA = coef[1] + (coef[2] * K_per_9) + (coef[3] * BB_per_9) + (coef[4] * HR_per_9) + (coef[5] * BABIP))
Pitching_Data_2021 <- Pitching_Data_2021 %>%
mutate(exp_ERA = coef2[1] + (coef2[2] * K_per_9) + (coef2[3] * BB_per_9) + (coef2[4] * HR_per_9) + (coef2[5] * BABIP))
View(Pitching_Data_2021)
coef2
View(Pitching_Data_2021)
Pitching_Data_2021 <- read.csv("~/GitHub/baseball model/Pitching_Data_2021.csv")
Pitching_Data_2021$Season <- 2021
Pitching_Data_2020 <- read.csv("~/GitHub/baseball model/Pitching_Data_2020.csv")
Pitching_Data_2020$Season <- 2020
Pitching_Data_2019 <- read.csv("~/GitHub/baseball model/Pitching_Data_2019.csv")
Pitching_Data_2019$Season <- 2019
Pitching_Data <- rbind(Pitching_Data_2019, Pitching_Data_2020, Pitching_Data_2021)
colnames(Pitching_Data)[1] <- colnames(Pitching_Data_2021)[1] <- 'Team'
colnames(Pitching_Data)[8] <- colnames(Pitching_Data_2021)[8] <- 'K_per_9'
colnames(Pitching_Data)[9] <- colnames(Pitching_Data_2021)[9] <-'BB_per_9'
colnames(Pitching_Data)[10] <- colnames(Pitching_Data_2021)[10] <- 'HR_per_9'
colnames(Pitching_Data)[12] <- colnames(Pitching_Data_2021)[12] <- 'LOB_pct'
colnames(Pitching_Data)[13] <- colnames(Pitching_Data_2021)[13] <- 'GB_pct'
colnames(Pitching_Data)[14] <- colnames(Pitching_Data_2021)[14] <-'HR_per_FB'
colnames(Pitching_Data)[15] <- colnames(Pitching_Data_2021)[15] <- 'VFA'
View(Pitching_Data_2021)
Pitching_Data[]<-lapply(Pitching_Data,gsub,pattern="%",fixed=TRUE,replacement="")
Pitching_Data_2021[] <- lapply(Pitching_Data_2021, gsub, pattern = "%", fixed = TRUE, replacement = "")
Pitching_Data[, c(2:19)] <- sapply(Pitching_Data[, c(2:19)], as.numeric)
Pitching_Data_2021[,c(2:19)] <- sapply(Pitching_Data[,c(2:19)], as.numeric)
View(Pitching_Data_2021)
#team data
Pitching_Data_2021 <- read.csv("~/GitHub/baseball model/Pitching_Data_2021.csv")
Pitching_Data_2021$Season <- 2021
Pitching_Data_2020 <- read.csv("~/GitHub/baseball model/Pitching_Data_2020.csv")
Pitching_Data_2020$Season <- 2020
Pitching_Data_2019 <- read.csv("~/GitHub/baseball model/Pitching_Data_2019.csv")
Pitching_Data_2019$Season <- 2019
Pitching_Data <- rbind(Pitching_Data_2019, Pitching_Data_2020, Pitching_Data_2021)
colnames(Pitching_Data)[1] <- colnames(Pitching_Data_2021)[1] <- 'Team'
colnames(Pitching_Data)[8] <- colnames(Pitching_Data_2021)[8] <- 'K_per_9'
colnames(Pitching_Data)[9] <- colnames(Pitching_Data_2021)[9] <-'BB_per_9'
colnames(Pitching_Data)[10] <- colnames(Pitching_Data_2021)[10] <- 'HR_per_9'
colnames(Pitching_Data)[12] <- colnames(Pitching_Data_2021)[12] <- 'LOB_pct'
colnames(Pitching_Data)[13] <- colnames(Pitching_Data_2021)[13] <- 'GB_pct'
colnames(Pitching_Data)[14] <- colnames(Pitching_Data_2021)[14] <-'HR_per_FB'
colnames(Pitching_Data)[15] <- colnames(Pitching_Data_2021)[15] <- 'VFA'
View(Pitching_Data_2021)
Pitching_Data[]<-lapply(Pitching_Data,gsub,pattern="%",fixed=TRUE,replacement="")
Pitching_Data_2021[] <- lapply(Pitching_Data_2021, gsub, pattern = "%", fixed = TRUE, replacement = "")
sapply(Pitching_Data_2021, class)
Pitching_Data[, c(2:21)] <- sapply(Pitching_Data[, c(2:21)], as.numeric)
View(Pitching_Data)
Pitching_Data_2021[,c(2:21)] <- sapply(Pitching_Data[,c(2:21)], as.numeric)
View(Pitching_Data_2021)
View(Pitching_Data_2021)
Pitching_Data_2021 <- read.csv("~/GitHub/baseball model/Pitching_Data_2021.csv")
Pitching_Data_2021$Season <- 2021
Pitching_Data_2020 <- read.csv("~/GitHub/baseball model/Pitching_Data_2020.csv")
Pitching_Data_2020$Season <- 2020
Pitching_Data_2019 <- read.csv("~/GitHub/baseball model/Pitching_Data_2019.csv")
Pitching_Data_2019$Season <- 2019
Pitching_Data <- rbind(Pitching_Data_2019, Pitching_Data_2020, Pitching_Data_2021)
colnames(Pitching_Data)[1] <- colnames(Pitching_Data_2021)[1] <- 'Team'
colnames(Pitching_Data)[8] <- colnames(Pitching_Data_2021)[8] <- 'K_per_9'
colnames(Pitching_Data)[9] <- colnames(Pitching_Data_2021)[9] <-'BB_per_9'
colnames(Pitching_Data)[10] <- colnames(Pitching_Data_2021)[10] <- 'HR_per_9'
colnames(Pitching_Data)[12] <- colnames(Pitching_Data_2021)[12] <- 'LOB_pct'
colnames(Pitching_Data)[13] <- colnames(Pitching_Data_2021)[13] <- 'GB_pct'
colnames(Pitching_Data)[14] <- colnames(Pitching_Data_2021)[14] <-'HR_per_FB'
colnames(Pitching_Data)[15] <- colnames(Pitching_Data_2021)[15] <- 'VFA'
View(Pitching_Data_2021)
Pitching_Data[]<-lapply(Pitching_Data,gsub,pattern="%",fixed=TRUE,replacement="")
Pitching_Data_2021[] <- lapply(Pitching_Data_2021, gsub, pattern = "%", fixed = TRUE, replacement = "")
Pitching_Data[, c(2:21)] <- sapply(Pitching_Data[, c(2:21)], as.numeric)
Pitching_Data_2021[, c(2:21)] <- sapply(Pitching_Data_2021[, c(2:21)], as.numeric)
View(Pitching_Data_2021)
Pitching_Data <- Pitching_Data %>%
select(-c('VFA', 'xERA'))
Pitching_Data <- Pitching_Data %>%
mutate(LOB_pct = LOB_pct / 100,
GB_pct = GB_pct / 100,
HR_per_FB = HR_per_FB / 100,
)
Pitching_Data_2021 <- Pitching_Data_2021 %>%
select(-c('VFA', 'xERA'))
Pitching_Data_2021 <- Pitching_Data_2021 %>%
mutate(LOB_pct = LOB_pct / 100,
GB_pct = GB_pct / 100,
HR_per_FB = HR_per_FB / 100,
)
View(Pitching_Data_2021)
#lm
lm_df <- Pitching_Data %>%
select(c(ERA, K_per_9, BB_per_9, HR_per_9, BABIP, GB_pct, HR_per_FB))
lm_model <- lm(ERA~., data = lm_df)
step <- ols_step_all_possible(lm_model)
output <- as.data.frame(cbind(step$predictors, step$adjr))
colnames(output) <- c('Predictors', 'Adj_r2')
output <- output[order(-Adj_r2),]
summary(lm_model)
lm_df_2 <- Pitching_Data%>%
select(c(ERA, K_per_9, BB_per_9, HR_per_9, BABIP))
lm_model_2 <- lm(ERA~., data = lm_df_2)
summary(lm_model_2)
coef2 <- lm_model_2$coef
Pitching_Data_2021 <- Pitching_Data_2021 %>%
mutate(exp_ERA = coef2[1] + (coef2[2] * K_per_9) + (coef2[3] * BB_per_9) + (coef2[4] * HR_per_9) + (coef2[5] * BABIP))
View(Pitching_Data_2021)
Pitching_Data_2021 <- Pitching_Data_2021 %>%
mutate(exp_ERA = coef2[1] + (coef2[2] * K_per_9) + (coef2[3] * BB_per_9) + (coef2[4] * HR_per_9) + (coef2[5] * BABIP),
exp_runs = exp_ERA * (IP/9))
#final pitching
Final_Pitching <- Pitching_Data_2021 %>%
select(c(Team, exp_ERA, exp_runs))
View(Final_Pitching)
Py_wins_2021 <- bind_rows(Final_Pitching, Final_Offense)
#final model build
library(tidyverse)
library(readr)
library(rio)
library(olsrr)
library(baseballr)
library(reshape2)
library(Lahman)
library(rvest)
library(xml2)
#get data for park_factors
park_factor <- fg_park(2021)
#teams data from Lahman database
teams <- Teams %>%
filter(yearID > 2000) %>%
select(teamID, yearID, lgID, G, W, L, R, RA)
#team stats data for analysis
team_stats <- Teams %>%
filter(yearID >= 2018) %>%
select(teamID, yearID, lgID, G, W, L, R, RA, AB, H, X2B, X3B, HR, BB, SO, ER, ERA, HA, HRA, BBA, SOA, HBP, SF)
team_stats_10 <- Teams %>%
filter(yearID >= 2011) %>%
select(teamID, yearID, lgID, G, W, L, R, RA, AB, H, X2B, X3B, HR, BB, SO, ER, ERA, HA, HRA, BBA, SOA, HBP, SF)
team_stats_20 <- Teams %>%
filter(yearID >= 2001) %>%
select(teamID, yearID, lgID, G, W, L, R, RA, AB, H, X2B, X3B, HR, BB, SO, ER, ERA, HA, HRA, BBA, SOA, HBP, SF)
#earned run adjustment
earned_run_data <- Teams %>%
filter(yearID > 2000) %>%
select(teamID, yearID, RA,ER, E)
#2021 data for building model
TeamData2021 <- read.csv("~/GitHub/baseball model/2021TeamData.csv")
teams <- teams %>%
mutate (RD = R - RA, Wpct = W / (W + L))
run_diff <- ggplot(teams, aes(x = RD, y = Wpct)) + geom_point() +
scale_x_continuous('Run Differential') +
scale_y_continuous('Win Pct')
run_diff + geom_smooth(method = 'lm', se = F)
#check regression of win pct vs. run diff
lm_RD <- lm(Wpct ~ RD, data = teams)
summary(lm_RD)
###
<!-- Call: -->
<!-- lm(formula = Wpct ~ RD, data = teams) -->
<!-- Residuals: -->
<!--       Min        1Q    Median        3Q       Max  -->
<!-- -0.133702 -0.018865 -0.000675  0.017166  0.131268  -->
<!-- Coefficients: -->
<!--              Estimate Std. Error t value Pr(>|t|)     -->
<!-- (Intercept) 5.000e-01  1.154e-03  433.30   <2e-16 *** -->
<!-- RD          6.281e-04  1.055e-05   59.52   <2e-16 *** -->
<!-- --- -->
<!-- Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 -->
<!-- Residual standard error: 0.02826 on 598 degrees of freedom -->
<!-- Multiple R-squared:  0.8556,	Adjusted R-squared:  0.8553  -->
<!-- F-statistic:  3542 on 1 and 598 DF,  p-value: < 2.2e-16 -->
###
lm_RD <- lm(Wpct ~ RD, data = teams)
summary(lm_RD)
coef_RD <- lm_RD$coefficients
# <!-- Call: -->
#   <!-- lm(formula = Wpct ~ RD, data = teams) -->
#
#   <!-- Residuals: -->
#   <!--       Min        1Q    Median        3Q       Max  -->
#   <!-- -0.133702 -0.018865 -0.000675  0.017166  0.131268  -->
#
#   <!-- Coefficients: -->
#   <!--              Estimate Std. Error t value Pr(>|t|)     -->
#   <!-- (Intercept) 5.000e-01  1.154e-03  433.30   <2e-16 *** -->
#   <!-- RD          6.281e-04  1.055e-05   59.52   <2e-16 *** -->
#   <!-- --- -->
#   <!-- Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 -->
#
#   <!-- Residual standard error: 0.02826 on 598 degrees of freedom -->
#   <!-- Multiple R-squared:  0.8556,	Adjusted R-squared:  0.8553  -->
#   <!-- F-statistic:  3542 on 1 and 598 DF,  p-value: < 2.2e-16 -->
#check residuals
library(lmtest)
library(fBasics)
dwtest(lm_RD)
jarqueberaTest(lm_RD$resid) #Test residuals for normality
resid_RD <- lm_RD$residuals
plot(lm_RD, which = 1, col = c('blue'))
plot(lm_RD, which = 2, col = c('red'))
View(teams)
#expected Wpct
teams <- teams %>%
mutate(ExpWpct = (R-RA) * coef_RD[1])
coef_RD
#expected Wpct
teams <- teams %>%
mutate(ExpWpct = (R-RA) * coef_RD[2])
teams <- teams %>%
mutate(ExpWpct = (R-RA) * coef_RD[2] + .500)
teams <- teams %>%
mutate(resExpWpct = Wpct - ExpWpct)
teams %>%
summarize(rmse = sqrt(mean(resExpWpct^2)))
#incremental runs needed for a win
IR <- function(RS = 5, RA = 5){
(RS^2 + RA^2)^2 / (2 * RS * RA^2)
ir_table <- expand_grid(RS = seq(3,6,0.5), RA = seq(3,6,.5))
ir_table %>%
mutate(IRW = IR(RS,RA)) %>%
spread(key = RA, value = IRW, sep = '=') %>%
round(1)
ir_table <- expand_grid(RS = seq(3,6,0.5), RA = seq(3,6,.5))
ir_table %>%
mutate(IRW = IR(RS,RA)) %>%
spread(key = RA, value = IRW, sep = '=') %>%
round(1)
)
ir_table <- expand_grid(RS = seq(3,6,0.5), RA = seq(3,6,.5))
ir_table %>%
mutate(IRW = IR(RS,RA)) %>%
spread(key = RA, value = IRW, sep = '=') %>%
round(1)
setwd('C:\\Users\\ericp\\OneDrive\\Documents\\GitHub\\baseball model\\hitting_teams')
#hitting data
temp = list.files(pattern="*.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
Batting_Data_2022 <-
list.files(pattern = "*.csv") %>%
map_df(~read_csv(., col_types = cols(.default = "c")))
Batting_Data_2022[, c(3:28)] <- sapply(Batting_Data_2022[, c(3:28)], as.numeric)
Batting_Data_2022 <- Batting_Data_2022 %>%
filter(PA > 19)
View(Batting_Data_2022)
Batting_Data_2022 <- Batting_Data_2022 %>%
filter(PA > 19)
View(Batting_Data_2022)
View(Batting_Data_2022)
Batting_Data_2022$PA
typeof(Batting_Data_2022$PA)
Batting_Data_2022[Batting_Data_2022[PA>20]]
Batting_Data_2022 <-
list.files(pattern = "*.csv") %>%
map_df(~read_csv(., col_types = cols(.default = "c")))
Batting_Data_2022[, c(3:28)] <- sapply(Batting_Data_2022[, c(3:28)], as.numeric)
Batting_Data_2022 <- Batting_Data_2022 %>%
filter(PA > 19)
#final model build
library(tidyverse)
library(readr)
library(rio)
library(olsrr)
library(baseballr)
library(reshape2)
library(Lahman)
library(rvest)
library(xml2)
#get data for park_factors
park_factor <- fg_park(2021)
#teams data from Lahman database
teams <- Teams %>%
filter(yearID > 2000) %>%
select(teamID, yearID, lgID, G, W, L, R, RA)
#team stats data for analysis
team_stats <- Teams %>%
filter(yearID >= 2018) %>%
select(teamID, yearID, lgID, G, W, L, R, RA, AB, H, X2B, X3B, HR, BB, SO, ER, ERA, HA, HRA, BBA, SOA, HBP, SF)
team_stats_10 <- Teams %>%
filter(yearID >= 2011) %>%
select(teamID, yearID, lgID, G, W, L, R, RA, AB, H, X2B, X3B, HR, BB, SO, ER, ERA, HA, HRA, BBA, SOA, HBP, SF)
team_stats_20 <- Teams %>%
filter(yearID >= 2001) %>%
select(teamID, yearID, lgID, G, W, L, R, RA, AB, H, X2B, X3B, HR, BB, SO, ER, ERA, HA, HRA, BBA, SOA, HBP, SF)
#earned run adjustment
earned_run_data <- Teams %>%
filter(yearID > 2000) %>%
select(teamID, yearID, RA,ER, E)
#2021 data for building model
TeamData2021 <- read.csv("~/GitHub/baseball model/2021TeamData.csv")
teams <- teams %>%
mutate (RD = R - RA, Wpct = W / (W + L))
run_diff <- ggplot(teams, aes(x = RD, y = Wpct)) + geom_point() +
scale_x_continuous('Run Differential') +
scale_y_continuous('Win Pct')
run_diff + geom_smooth(method = 'lm', se = F)
#check regression of win pct vs. run diff
lm_RD <- lm(Wpct ~ RD, data = teams)
summary(lm_RD)
coef_RD <- lm_RD$coefficients
#check residuals
library(lmtest)
library(fBasics)
dwtest(lm_RD)
jarqueberaTest(lm_RD$resid) #Test residuals for normality
resid_RD <- lm_RD$residuals
plot(lm_RD, which = 1, col = c('blue'))
plot(lm_RD, which = 2, col = c('red'))
#residuals look normal and randomly distributed
#win pct = 0.5000 + 0.0006281 * run_diff
#expected Wpct
teams <- teams %>%
mutate(ExpWpct = (R-RA) * coef_RD[2] + .500)
teams <- teams %>%
mutate(resExpWpct = Wpct - ExpWpct)
teams %>%
summarize(rmse = sqrt(mean(resExpWpct^2)))
#rmse = 0.02572
#incremental runs needed for a win
IR <- function(RS = 5, RA = 5){
(RS^2 + RA^2)^2 / (2 * RS * RA^2)
}
ir_table <- expand_grid(RS = seq(3,6,0.5), RA = seq(3,6,.5))
ir_table %>%
mutate(IRW = IR(RS,RA)) %>%
spread(key = RA, value = IRW, sep = '=') %>%
round(1)
setwd('C:\\Users\\ericp\\OneDrive\\Documents\\GitHub\\baseball model\\hitting_teams')
#hitting data
temp = list.files(pattern="*.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
Batting_Data_2022 <-
list.files(pattern = "*.csv") %>%
map_df(~read_csv(., col_types = cols(.default = "c")))
Batting_Data_2022[, c(3:28)] <- sapply(Batting_Data_2022[, c(3:28)], as.numeric)
Batting_Data_2022 <- Batting_Data_2022 %>%
filter(PA >= 20)
Batting_Data_2022 <- Batting_Data_2022 %>%
filter(AB >= 20)
Batting_Data_2022 <- Batting_Data_2022 %>% filter(AB >= 20)
Batting_Data_2022 <- Batting_Data_2022 %>% filter(AB >= 20)
typeof(Batting_Data_2022)
Batting_Data_2022 <- as.data.frame(Batting_Data_2022)
Batting_Data_2022 <- Batting_Data_2022 %>% filter(AB >= 20)
typeof(Batting_Data_2022)
Batting_Data_2022 <- ldply (Batting_Data_2022, data.frame)
library(dplyr)
Batting_Data_2022 <- ldply (Batting_Data_2022, data.frame)
library(plyr)
Batting_Data_2022 <- ldply (Batting_Data_2022, data.frame)
Batting_Data_2022 <- Batting_Data_2022 %>% filter(AB >= 20)
typeof(Batting_Data_2022)
View(Batting_Data_2022)
Batting_Data_2022 <-
list.files(pattern = "*.csv") %>%
map_df(~read_csv(., col_types = cols(.default = "c")))
Batting_Data_2022[, c(3:28)] <- sapply(Batting_Data_2022[, c(3:28)], as.numeric)
View(Batting_Data_2022)
Batting_Data_2022 <- Batting_Data_2022 %>% filter(AB >= 20)
setwd('C:\\Users\\ericp\\OneDrive\\Documents\\GitHub\\baseball model\\hitting_teams')
#hitting data
temp = list.files(pattern="*.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
Batting_Data_2022 <-
list.files(pattern = "*.csv") %>%
map_df(~read_csv(., col_types = cols(.default = "c")))
Batting_Data_2022[, c(3:28)] <- sapply(Batting_Data_2022[, c(3:28)], as.numeric)
Batting_Data_2022 <- ldply (Batting_Data_2022, data.frame)
Batting_Data_2022 <- Batting_Data_2022 %>% filter(AB >= 20)
temp <- list.files(pattern="*.csv")
myfiles <- lapply(temp, read.delim)
View(myfiles)
temp <- list.files(pattern="*.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
tbl <-
list.files(pattern = "*.csv") %>%
map_df(~read_csv(.))
tbl <- lapply(files, read_csv) %>% bind_rows()
tbl <- lapply(read_csv) %>% bind_rows()
Batting_Data_2022 <- list.files(path = 'C:\\Users\\ericp\\OneDrive\\Documents\\GitHub\\baseball model\\hitting_teams',
recursive = TRUE,
pattern = "\\.csv$",
full.names = TRUE)
list_of_files <- list.files(path = 'C:\\Users\\ericp\\OneDrive\\Documents\\GitHub\\baseball model\\hitting_teams',
recursive = TRUE,
pattern = "\\.csv$",
full.names = TRUE)
Batting_Data_2022 <- readr::read_csv(list_of_files, id = "file_name")
View(Batting_Data_2022)
Batting_Data_2022 <- readr::read_csv(list_of_files)
View(Batting_Data_2022)
Batting_Data_2022 <- Batting_Data_2022 %>% filter(AB >= 20)
#pitching data
temp = list.files(pattern="*.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
Pitching_Data_2022 <- dir(path = 'C:\\Users\\ericp\\OneDrive\\Documents\\GitHub\\baseball model\\pitching_teams', full.names = T) %>%
map_df(read_csv)
Pitching_Data_2022 <- Pitching_Data_2022 %>%
filter(IP > 20)
View(Pitching_Data_2022)
Pitching_Data_2022 <- Pitching_Data_2022 %>%
filter(IP > 20)
typeof(Pitching_Data_2022)
Pitching_Data_2022$IP
typeof(Pitching_Data_2022$IP)
Pitching_Data_2022 <- Pitching_Data_2022[Pitching_Data_2022$IP > 20]
Pitching_Data_2022 <- dir(path = 'C:\\Users\\ericp\\OneDrive\\Documents\\GitHub\\baseball model\\pitching_teams', full.names = T) %>% map_df(read_csv)
View(Pitching_Data_2022)
colnames(Pitching_Data_2022)
Pitching_Data_2022 <- Pitching_Data_2022[Pitching_Data_2022$IP > 20]
Batting_Data_2022 <- dir(path = 'C:\\Users\\ericp\\OneDrive\\Documents\\GitHub\\baseball model\\hitting_teams', full.names = T) %>% map_df(read_csv)
#get data for park_factors
park_factor <- fg_park(2021)
#teams data from Lahman database
teams <- Teams %>%
filter(yearID > 2000) %>%
select(teamID, yearID, lgID, G, W, L, R, RA)
#team stats data for analysis
team_stats <- Teams %>%
filter(yearID >= 2018) %>%
select(teamID, yearID, lgID, G, W, L, R, RA, AB, H, X2B, X3B, HR, BB, SO, ER, ERA, HA, HRA, BBA, SOA, HBP, SF)
team_stats_10 <- Teams %>%
filter(yearID >= 2011) %>%
select(teamID, yearID, lgID, G, W, L, R, RA, AB, H, X2B, X3B, HR, BB, SO, ER, ERA, HA, HRA, BBA, SOA, HBP, SF)
team_stats_20 <- Teams %>%
filter(yearID >= 2001) %>%
select(teamID, yearID, lgID, G, W, L, R, RA, AB, H, X2B, X3B, HR, BB, SO, ER, ERA, HA, HRA, BBA, SOA, HBP, SF)
#earned run adjustment
earned_run_data <- Teams %>%
filter(yearID > 2000) %>%
select(teamID, yearID, RA,ER, E)
#2021 data for building model
TeamData2021 <- read.csv("~/GitHub/baseball model/2021TeamData.csv")
teams <- teams %>%
mutate (RD = R - RA, Wpct = W / (W + L))
run_diff <- ggplot(teams, aes(x = RD, y = Wpct)) + geom_point() +
scale_x_continuous('Run Differential') +
scale_y_continuous('Win Pct')
run_diff + geom_smooth(method = 'lm', se = F)
#check regression of win pct vs. run diff
lm_RD <- lm(Wpct ~ RD, data = teams)
summary(lm_RD)
coef_RD <- lm_RD$coefficients
#check residuals
library(lmtest)
library(fBasics)
dwtest(lm_RD)
jarqueberaTest(lm_RD$resid) #Test residuals for normality
resid_RD <- lm_RD$residuals
plot(lm_RD, which = 1, col = c('blue'))
plot(lm_RD, which = 2, col = c('red'))
#residuals look normal and randomly distributed
#win pct = 0.5000 + 0.0006281 * run_diff
#expected Wpct
teams <- teams %>%
mutate(ExpWpct = (R-RA) * coef_RD[2] + .500)
teams <- teams %>%
mutate(resExpWpct = Wpct - ExpWpct)
teams %>%
summarize(rmse = sqrt(mean(resExpWpct^2)))
#rmse = 0.02572
#incremental runs needed for a win
IR <- function(RS = 5, RA = 5){
(RS^2 + RA^2)^2 / (2 * RS * RA^2)
}
ir_table <- expand_grid(RS = seq(3,6,0.5), RA = seq(3,6,.5))
ir_table %>%
mutate(IRW = IR(RS,RA)) %>%
spread(key = RA, value = IRW, sep = '=') %>%
round(1)
setwd('C:\\Users\\ericp\\OneDrive\\Documents\\GitHub\\baseball model\\hitting_teams')
#hitting data
temp = list.files(pattern="*.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
Batting_Data_2022 <- dir(path = 'C:\\Users\\ericp\\OneDrive\\Documents\\GitHub\\baseball model\\hitting_teams', full.names = T) %>% map_df(read_csv)
setwd('C:\\Users\\ericp\\OneDrive\\Documents\\GitHub\\baseball model\\hitting_teams')
files = list.files(pattern="*.csv")
data_list = lapply(files, read.table, header = TRUE)
df <- do.call(rbind, data_list)
files <- list.files(pattern="*.csv")
data_list <- lapply(files, read.table, header = TRUE)
Batting_Data_2021 <- read.csv("~/GitHub/baseball model/Batting_Data_2021.csv")
View(Batting_Data_2021)
file_names <- dir('C:\\Users\\ericp\\OneDrive\\Documents\\GitHub\\baseball model\\hitting_teams') #where you have your files
your_data_frame <- do.call(rbind,lapply(file_names,read.csv))
steamer_pitching <- read.csv("~/GitHub/baseball model/steamer_pitching.csv")
View(steamer_pitching)
steamer_hitting <- read.csv("~/GitHub/baseball model/steamer_hitting.csv")
View(steamer_hitting)
View(steamer_pitching)
View(steamer_pitching)
#final model build
library(tidyverse)
library(readr)
library(rio)
library(olsrr)
library(baseballr)
library(reshape2)
library(Lahman)
library(rvest)
library(xml2)
library(dplyr)
library(plyr)
#get data for park_factors
park_factor <- fg_park(2021)
#teams data from Lahman database
teams <- Teams %>%
filter(yearID > 2000) %>%
select(teamID, yearID, lgID, G, W, L, R, RA)

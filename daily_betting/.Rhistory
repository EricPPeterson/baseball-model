earned_run_data <- Teams %>%
dplyr :: filter(yearID > 2000) %>%
select(teamID, yearID, RA,ER, E)
by_year <- earned_run_data %>%
group_by(yearID) %>%
summarize(yearly_avg = mean(RA/ER))
#2021 data for building model
#use 2021 data to see how many runs teams 'should' have scored and 'should' have allowed after removing cluster luck.
TeamData2021 <- read.csv("~/GitHub/baseball model/2021TeamData.csv")
#create teams df for creating lm for run differential
teams <- teams %>%
mutate (RD = R - RA, Wpct = W / (W + L))
run_diff <- ggplot(teams, aes(x = RD, y = Wpct)) + geom_point() +
scale_x_continuous('Run Differential') +
scale_y_continuous('Win Pct')
run_diff + geom_smooth(method = 'lm', se = F)
#check regression of win pct vs. run diff
lm_RD <- lm(Wpct ~ RD, data = teams)
summary(lm_RD)
#save coefficients of linear model to predict wins for teams based on predicted runs scored and runs allowed.
coef_RD <- lm_RD$coefficients
#check residuals
#see if linear model residuals are random and normally distributed
library(lmtest)
library(fBasics)
dwtest(lm_RD)
jarqueberaTest(lm_RD$resid) #Test residuals for normality
resid_RD <- lm_RD$residuals
plot(lm_RD, which = 1, col = c('blue'))
plot(lm_RD, which = 2, col = c('red'))
#residuals look normal and randomly distributed
#use below formula to turn run differential into predicted win %
#win pct = 0.5000 + 0.0006281 * run_diff
#expected Wpct
teams <- teams %>%
mutate(ExpWpct = (R-RA) * coef_RD[2] + .500)
teams <- teams %>%
mutate(resExpWpct = Wpct - ExpWpct)
teams %>%
summarize(rmse = sqrt(mean(resExpWpct^2)))
#incremental runs needed for a win
#create table to confirm how many runs added to run differential equals 1 win.
IR <- function(RS = 5, RA = 5){
(RS^2 + RA^2)^2 / (2 * RS * RA^2)
}
ir_table <- expand_grid(RS = seq(3,6,0.5), RA = seq(3,6,.5))
ir_table %>%
mutate(IRW = IR(RS,RA)) %>%
spread(key = RA, value = IRW, sep = '=') %>%
round(1)
#hitting data
#team data
Batting_Data_2021 <- read.csv("~/GitHub/baseball model/Batting_Data_2021.csv")
Batting_Data_2021$Season <- 2021
Batting_Data_2020 <- read.csv("~/GitHub/baseball model/Batting_Data_2020.csv")
Batting_Data_2020$Season <- 2020
Batting_Data_2019 <- read.csv("~/GitHub/baseball model/Batting_Data_2019.csv")
Batting_Data_2019$Season <- 2019
Batting_Data <- rbind(Batting_Data_2019, Batting_Data_2020, Batting_Data_2021)
colnames(Batting_Data)[1] <- colnames(Batting_Data_2021)[1] <- 'Team'
colnames(Batting_Data)[8] <- colnames(Batting_Data_2021)[8] <-'BB_rate'
colnames(Batting_Data)[9] <- colnames(Batting_Data_2021)[9] <- 'K_rate'
Batting_Data[]<-lapply(Batting_Data,gsub,pattern="%",fixed=TRUE,replacement="")
Batting_Data_2021[]<-lapply(Batting_Data_2021,gsub,pattern="%",fixed=TRUE,replacement="")
Batting_Data[, c(2:341)] <- sapply(Batting_Data[, c(2:341)], as.numeric)
Batting_Data_2021[, c(2:341)] <- sapply(Batting_Data_2021[, c(2:341)], as.numeric)
#variable creation
Batting_Data <- Batting_Data %>%
mutate(hit_per_run = H/R,
HR_rate = HR/AB,
BB_rate = BB_rate/100,
K_rate = K_rate/100)
Batting_Data_2021 <- Batting_Data_2021 %>%
mutate(hit_per_run = H/R,
HR_rate = HR/AB,
BB_rate = BB_rate/100,
K_rate = K_rate/100)
sacs_total <- 38
#steamer projection
steamer_hitting <- as.data.frame(read.csv("~/GitHub/baseball model/steamer_hitting.csv")) %>%
dplyr::filter(AB > 50)
colnames(steamer_hitting)[1] <- 'Name'
steamer_hitting$Team <- sub("^$", "FA", steamer_hitting$Team)
#pitching data
#team data
Pitching_Data_2021 <- read.csv("~/GitHub/baseball model/Pitching_Data_2021.csv")
Pitching_Data_2021$Season <- 2021
Pitching_Data_2020 <- read.csv("~/GitHub/baseball model/Pitching_Data_2020.csv")
Pitching_Data_2020$Season <- 2020
Pitching_Data_2019 <- read.csv("~/GitHub/baseball model/Pitching_Data_2019.csv")
Pitching_Data_2019$Season <- 2019
Pitching_Data <- rbind(Pitching_Data_2019, Pitching_Data_2020, Pitching_Data_2021)
colnames(Pitching_Data)[1] <- colnames(Pitching_Data_2021)[1] <- 'Team'
colnames(Pitching_Data)[8] <- colnames(Pitching_Data_2021)[8] <-'K_per_9'
colnames(Pitching_Data)[9] <- colnames(Pitching_Data_2021)[9] <- 'BB_per_9'
colnames(Pitching_Data)[10] <- colnames(Pitching_Data_2021)[10] <- 'HR_per_9'
colnames(Pitching_Data)[12] <- colnames(Pitching_Data_2021)[12] <- 'LOB_pct'
colnames(Pitching_Data)[13] <- colnames(Pitching_Data_2021)[13] <- 'GB_pct'
colnames(Pitching_Data)[14] <- colnames(Pitching_Data_2021)[14] <- 'HR_per_FB'
Pitching_Data[]<-lapply(Pitching_Data,gsub,pattern="%",fixed=TRUE,replacement="")
Pitching_Data_2021[]<-lapply(Pitching_Data_2021,gsub,pattern="%",fixed=TRUE,replacement="")
Pitching_Data[, c(2:21)] <- sapply(Pitching_Data[, c(2:21)], as.numeric)
Pitching_Data_2021[, c(2:21)] <- sapply(Pitching_Data_2021[, c(2:21)], as.numeric)
#variable mutation
Pitching_Data <- Pitching_Data %>%
mutate(LOB_pct = LOB_pct/100,
GB_pct = GB_pct/100
)
Pitching_Data_2021 <- Pitching_Data_2021 %>%
mutate(LOB_pct = LOB_pct/100,
GB_pct = GB_pct/100
)
#relief pitching stats
relief_pitching_stats <- read.csv("~/GitHub/baseball model/relief pitching stats.csv")
colnames(relief_pitching_stats)[1] <- 'Team'
#variable creation
relief_pitching_stats <- relief_pitching_stats %>%
mutate(games_pitched = IP / 9,
total_ER = games_pitched * ERA)
relief_pitching_stats %>%
group_by(League) %>%
dplyr :: summarise(
total_inn = sum(IP),
runs_per_inn = sum(total_ER) / sum(total_inn)
)
relief_AL <- 0.461
relief_NL <- 0.465
relief <- 0.463
#steamer projection
steamer_pitching <- read.csv("~/GitHub/baseball model/steamer_pitching.csv") %>%
dplyr :: filter(WAR > 0)
colnames(steamer_pitching)[1] <- 'Name'
steamer_pitching$Team <- sub("^$", "FA", steamer_pitching$Team)
#lm
lm_df <- Batting_Data %>%
select(c(hit_per_run, BB_rate, K_rate, HR_rate, ISO, BABIP, AVG, OBP, SLG))
lm_model <- lm(hit_per_run~., data = lm_df)
step <- ols_step_all_possible(lm_model)
output <- as.data.frame(cbind(step$predictors, step$adjr))
colnames(output) <- c('Predictors', 'Adj_r2')
output <- output[order(-Adj_r2),]
summary(lm_model)
lm_df_2 <- Batting_Data %>%
select (c(hit_per_run, BB_rate, ISO, BABIP))
lm_model_2 <- lm(hit_per_run~., data = lm_df_2)
summary(lm_model_2)
coef <- lm_model_2$coefficients
#hit_per_run = 2.5708 - 6.6440 * BB_rate - 3.2686 * ISO + 1.2421 * BABIP
#check runs correlation
cor(lm_df_3[-1], lm_df_3$R)
num <- sapply(Batting_Data, is.numeric)
y1 <- 'R'
x1 <- setdiff(names(Batting_Data)[num], y1)
runs_corr <- cor(Batting_Data[x1], Batting_Data[[y1]])
#create final expected runs
Final_Offense <- Batting_Data_2021 %>%
mutate(exp_R = coef[1] + (coef[2] * BB_rate) + (coef[3] * ISO) + (coef[4] * BABIP),
exp_runs = H /exp_hit_per_run,
run_diff = exp_runs - R,
RC = ((H + BB - CS + HBP) * ((X1B + 2*X2B + 3*X3B + 4*HR) + (.26 * (BB - IBB + HBP) + (.52 * (SH + SF + SB)))) / (AB + BB + HBP + SH + SF)))
Final_Offense <- Final_Offense %>%
select(Team, exp_hit_per_run, exp_runs, R, run_diff, RC)
#create final expected runs
Final_Offense <- Batting_Data_2021 %>%
mutate(exp_hit_per_run = coef[1] + (coef[2] * BB_rate) + (coef[3] * ISO) + (coef[4] * BABIP),
exp_runs = H /exp_hit_per_run,
run_diff = exp_runs - R,
RC = ((H + BB - CS + HBP) * ((X1B + 2*X2B + 3*X3B + 4*HR) + (.26 * (BB - IBB + HBP) + (.52 * (SH + SF + SB)))) / (AB + BB + HBP + SH + SF)))
Final_Offense <- Final_Offense %>%
select(Team, exp_hit_per_run, exp_runs, R, run_diff, RC)
#lm pitching
lm_df <- Pitching_Data %>%
select(c(ERA, K_per_9, BB_per_9, HR_per_9, BABIP, GB_pct, HR_per_FB))
lm_model <- lm(ERA~., data = lm_df)
step <- ols_step_all_possible(lm_model)
output <- as.data.frame(cbind(step$predictors, step$adjr))
colnames(output) <- c('Predictors', 'Adj_r2')
output <- output[order(-Adj_r2),]
summary(lm_model)
lm_df_2 <- Pitching_Data%>%
select(c(ERA, K_per_9, BB_per_9, HR_per_9, BABIP))
lm_model_2 <- lm(ERA~., data = lm_df_2)
summary(lm_model_2)
coef2 <- lm_model_2$coef
#ERA = -1.05469 - 0.23055 * K_per_9 + 0.40402 * BB_per_9 + 1.56898 * HR_per_9 + 13.91693 * BABIP
#earned runs analysis
#total_runs / earned_runs = 1.086492
UE_runs <- 1.086492
p2 <- ggplot(by_year, aes(x = yearID, y = yearly_avg - 1)) + geom_line()
p2 + ggtitle('Percentage of unearned runs by year')
runs_ER <- mean(by_year$yearly_avg)
reg_ER <- lm(RA/ER~E, data = earned_run_data)
summary(reg_ER)
Pitching_Data_2021 <- Pitching_Data_2021 %>%
mutate(exp_ERA = coef2[1] + (coef2[2] * K_per_9) + (coef2[3] * BB_per_9) + (coef2[4] * HR_per_9) + (coef2[5] * BABIP),
exp_earned_runs_allowed = (exp_ERA * (IP/9)) + ((162*9) - IP) * 0.463,
total_runs_allowed = exp_earned_runs_allowed * runs_ER
)
#final pitching
Final_Pitching <- Pitching_Data_2021 %>%
select(c(Team, exp_ERA, exp_earned_runs_allowed, total_runs_allowed))
Final_Pitching <- Final_Pitching %>%
left_join(Std_2021, by = 'Team') %>%
select(c(Team, exp_ERA, exp_earned_runs_allowed, total_runs_allowed, RA))
Final_Pitching <- Final_Pitching %>%
mutate(runs_allowed_diff = total_runs_allowed - RA)
RA_2021 <- Std_2021 %>%
select(Team, RA)
#2021 final pythagorean wins
Py_wins_2021 <- merge(Final_Pitching, Final_Offense, by = 'Team')
Py_wins_2021 <- Py_wins_2021 %>%
mutate(exp_win_pct = ((exp_runs - total_runs_allowed) * coef_RD[2]) + .500,
exp_wins = 162 * exp_win_pct)
act_wins <- Std_2021 %>%
select(c(Team, W))
Py_wins_2021 <- Py_wins_2021 %>%
left_join(act_wins, by = "Team")
Py_wins_2021 <- Py_wins_2021 %>%
mutate(win_diff = round(exp_wins - W, digits = 1))
#steamer stats
#hit_per_run = 2.5708 - 6.6440 * BB_rate - 3.2686 * ISO + 1.2421 * BABIP
#ERA = -1.05469 - 0.23055 * K_per_9 + 0.40402 * BB_per_9 + 1.56898 * HR_per_9 + 13.91693 * BABIP
runs_allowed = steamer_pitching %>%
group_by(Team) %>%
dplyr :: summarise(sum_ER = sum(ERA/9 * IP), sumIP = sum(IP))
runs_allowed <- runs_allowed %>%
dplyr :: mutate(relief_innings = (162*9) - sumIP,
relief_runs = ((162*9 - sumIP) * relief),
total_ER = sum_ER + relief_runs,
total_runs_allowed = total_ER * UE_runs)
runs_allowed <- merge(runs_allowed, RA_2021, by = 'Team')
#compare WAR this year to last
WAR_2022_hitting <- steamer_hitting %>%
group_by(Team) %>%
dplyr :: summarise(sum_WAR = sum(WAR))
WAR_2022_hitting <- left_join(WAR_2022_hitting, Batting_Data_2021, by = 'Team') %>%
select(c(Team, sum_WAR, WAR)) %>%
mutate(WAR_diff = sum_WAR - WAR,
runs_scored_diff = WAR_diff * 10)
WAR_2022_pitching <- steamer_pitching %>%
group_by(Team) %>%
dplyr :: summarise (sum_WAR = sum(WAR))
WAR_2022_pitching <- left_join(WAR_2022_pitching, Pitching_Data_2021, by = 'Team') %>%
select(c(Team, sum_WAR, WAR)) %>%
mutate(WAR_diff = WAR - sum_WAR,
runs_surr_diff = WAR_diff * 10)
#add 2022 adjustments to data
WAR_adjustment <- left_join(WAR_2022_pitching, WAR_2022_hitting, by = 'Team') %>%
select(c(Team, runs_scored_diff, runs_surr_diff))
final_prediction <- merge(WAR_adjustment, Py_wins_2021, by = 'Team') %>%
select(c(Team, total_runs_allowed, exp_runs, runs_scored_diff, runs_surr_diff, W)) %>%
mutate (final_runs_scored = exp_runs + runs_scored_diff,
final_runs_surr = total_runs_allowed + runs_surr_diff,
exp_win_pct = (final_runs_scored - final_runs_surr) * coef_RD[2] + .500,
exp_wins = round(162 * exp_win_pct, digits = 1),
win_diff = exp_wins - W)
#import wynn data
wynn_over_under <- read.csv("~/GitHub/baseball model/wynn_over_under.csv")
colnames(wynn_over_under)[1] <- 'Team'
#combine model with wynn markets
bets <- left_join(final_prediction, wynn_over_under, by = 'Team') %>%
select(c(Team, exp_wins, Over_Under)) %>%
mutate(pct_diff = ((exp_wins - Over_Under) / Over_Under) * 100)
#look at innings pitched steamer
sum_IP_steamer <- steamer_pitching %>%
group_by(Team) %>%
dplyr :: summarise(totalIP = sum(IP))
View(bets)
View(final_prediction)
View(final_prediction)
coef
View(Final_Offense)
by_year
UE_runs <- by_year
p2 <- ggplot(by_year, aes(x = yearID, y = yearly_avg - 1)) + geom_line()
p2 + ggtitle('Percentage of unearned runs by year')
runs_ER <- mean(by_year$yearly_avg)
reg_ER <- lm(RA/ER~E, data = earned_run_data)
summary(reg_ER)
Pitching_Data_2021 <- Pitching_Data_2021 %>%
mutate(exp_ERA = coef2[1] + (coef2[2] * K_per_9) + (coef2[3] * BB_per_9) + (coef2[4] * HR_per_9) + (coef2[5] * BABIP),
exp_earned_runs_allowed = (exp_ERA * (IP/9)) + ((162*9) - IP) * 0.463,
total_runs_allowed = exp_earned_runs_allowed * runs_ER
)
runs_ER
View(bets)
#scrape daily lineups
#scrape injury data
#scrape FA signings
library(rvest)
starting_lineups <- read_html('https://www.mlb.com/starting-lineups/2021-10-31')
View(starting_lineups)
starting_lineups <- read_html('https://www.mlb.com/starting-lineups/2021-10-31')
starting_links <- starting_elements('sections')
starting_lineups <- read_html('https://www.mlb.com/starting-lineups/2021-10-31')
starting_links <- starting_lineups %>% html_elements('sections')
starting_links
View(starting_links)
starting_lineups %>%
html_element(".tracklist") %>%
html_table()
starting_lineups <- read_html('https://www.baseballpress.com/lineups/2020-09-17')
starting_lineups
View(starting_lineups)
starting_lineups %>%
html_nodes('p') %>%
html_text()
starting_lineups <- read_html('https://www.baseballpress.com/lineups/2020-09-17') %>%
html_nodes(".col--min:nth-of-type(1) > a.player-link, [class$='col--min']:nth-of-type(1) .player > a.player-link") %>%
html_text()
starting_lineups <- read_html('https://www.baseballpress.com/lineups/2020-09-17') %>%
html_nodes("no-js ") %>%
html_text()
starting_lineups <- read_html('https://www.baseballpress.com/lineups/2020-09-17') %>%
html_nodes("lineup-card-header") %>%
html_text()
starting_lineups <- read_html('https://www.baseballpress.com/lineups/2020-09-17') %>%
html_table(fill = TRUE)
View(starting_lineups)
View(bets)
url <- read_html('https://www.mlb.com/starting-lineups/2021-10-31')
starting_lineups <- url %>%
html() %>%
html_nodes(xpath = '//*[@id="starting-lineups_index"]/main/div[2]/div/div/div/section/div[2]') %>%
html_table()
library(rvest)
url <- read_html('https://www.mlb.com/starting-lineups/2021-10-31')
starting_lineups <- url %>%
html() %>%
html_nodes(xpath = '//*[@id="starting-lineups_index"]/main/div[2]/div/div/div/section/div[2]') %>%
html_table()
starting_lineups <- url %>%
html_nodes(xpath = '//*[@id="starting-lineups_index"]/main/div[2]/div/div/div/section/div[2]') %>%
html_table()
View(starting_lineups)
head(starting_lineups)
url <- read_html('https://www.fantasylabs.com/mlb/lineups/?date=10312021')
starting_lineups <- url %>%
html() %>%
html_nodes(xpath = '/html/body/div[2]/div/div/div/div/div[3]/div') %>%
html_table()
starting_lineups <- url %>%
html_nodes(xpath = '/html/body/div[2]/div/div/div/div/div[3]/div') %>%
html_table()
head(starting_lineups)
starting_lineups <- url %>%
html_nodes(xpath = '/html/body/div[2]/div/div/div/div/div[3]/div/div') %>%
html_table()
head(starting_lineups)
starting_lineups <- url %>%
html_nodes(xpath = '/html/body/div[2]/div/div/div/div/div[3]/div/div/div/div[3]') %>%
html_table()
head(starting_lineups)
url <- read_html('https://www.fantasylabs.com/mlb/lineups/?date=10312021')
url %>%
read_html()
url %>%
html_text()
detach("package:forcats", unload = TRUE)
url %>%
html_element('table')
url %>%
html_element('tr')
url <- read_html('https://www.fantasylabs.com/mlb/lineups/?date=10312021')
tables <- url %>% html_table()
View(tables)
tables <- url %>% html_table(fill = TRUE)
View(tables)
starting_lineup <- tables[[1]]
View(starting_lineup)
starting_lineup <- tables[[2]]
View(starting_lineup)
starting_lineup <- tables[[3]]
View(starting_lineup)
View(tables)
url <- read_html('https://www.fantasylabs.com/mlb/lineups/?date=10312021')
tables <- url %>% html_table(fill = TRUE)
url <- read_html('https://www.rotowire.com/baseball/injury-report.php')
tables <- url %>% html_table(fill = TRUE)
url <- read_html('https://www.rotowire.com/baseball/injury-report.php')
tables <- url %>% html_table()
url <- read_html('https://www.mlb.com/injury-report')
tables <- url %>% html_table()
url <- read_html('https://www.mlb.com/injury-report')
tables <- url %>% html_table(fill = TRUE)
View(tables)
url <- read_html('https://en.wikipedia.org/wiki/List_of_highest-grossing_films_in_the_United_States_and_Canada')
tables <- url %>% html_table(fill = TRUE)
first_table <- tables[[1]]
View(first_table)
url <- read_html('https://www.espn.com.au/mlb/schedule')
tables <- url %>% html_table(fill = TRUE)
first_table <- tables[[1]]
View(tables)
View(first_table)
url <- read_html('https://www.espn.com.au/mlb/transactions')
tables <- url %>% html_table(fill = TRUE)
first_table <- tables[[1]]
View(first_table)
first_table <- tables[[2]]
View(first_table)
url <- read_html('https://www.espn.com.au/mlb/team/schedule/_/name/ari')
tables <- url %>% html_table(fill = TRUE)
first_table <- tables[[1]]
View(first_table)
url <- read_html('https://www.espn.com.au/mlb/team/schedule/_/name/ari')
tables <- url %>% html_table(fill = TRUE, header = TRUE)
first_table <- tables[[1]]
View(first_table)
url <- read_html('https://www.espn.com.au/mlb/team/schedule/_/name/ari')
tables <- url %>% html_table(fill = TRUE, header = TRUE)
first_table <- tables[[1]]
View(first_table)
url <- read_html('https://www.espn.com.au/mlb/team/injuries/_/name/ari')
tables <- url %>% html_table(fill = TRUE, header = TRUE)
first_table <- tables[[1]]
url <- read_html('https://www.mlb.com/starting-lineups/2021-04-04')
tables <- url %>% html_table(fill = TRUE, header = TRUE)
injury_report <- read_html('https://www.fangraphs.com/roster-resource/injury-report?groupby=all')
tables <- injury_report %>% html_table(fill = TRUE, header = TRUE)
first_table <- tables[[1]]
View(injury_report)
View(first_table)
first_table <- tables[[2]]
View(first_table)
first_table <- tables[[3]]
View(first_table)
View(tables)
first_table <- tables[[7]]
first_table <- tables[[6]]
first_table <- tables[[5]]
first_table <- tables[[4]]
View(tables)
View(tables)
injury_report <- read_html('https://www.fangraphs.com/roster-resource/lineup-tracker')
tables <- injury_report %>% html_table(fill = TRUE, header = TRUE)
View(tables)
first_table <- tables[[1]]
View(first_table)
first_table <- tables[[2]]
View(first_table)
first_table <- tables[[3]]
View(first_table)
first_table <- tables[[4]]
View(first_table)
injury_report <- read_html('https://www.fangraphs.com/roster-resource/free-agent-tracker')
tables <- injury_report %>% html_table(fill = TRUE, header = TRUE)
first_table <- tables[[1]]
View(tables)
injury_report <- read_html('https://www.fangraphs.com/roster-resource/free-agent-tracker')
tables <- injury_report %>% html_table(fill = TRUE, header = TRUE)
first_table <- tables[[7]]
injury_report <- read_html('https://www.rotowire.com/baseball/daily-lineups.php')
tables <- injury_report %>% html_table(fill = TRUE, header = TRUE)
first_table <- tables[[7]]
injury_report <- read_html('https://www.rotowire.com/baseball/daily-lineups.php')
tables <- injury_report %>% html_form(q = 'Lineup')
BOS_roster <- read_html('https://www.fangraphs.com/roster-resource/depth-charts/red-sox')
tables <- BOS_roster %>% html_table(Fill = TRUE, header = TRUE)
tables <- BOS_roster %>% html_table(header = TRUE, fill = TRUE)
View(tables)
View(bets)
write.csv(bets,'C:\Users\ericp\OneDrive\Documents\GitHub\baseball model\over_under_wins.csv')
write.csv(bets,'\Users\ericp\OneDrive\Documents\GitHub\baseball model\over_under_wins.csv')
write.csv(bets,'~\Users\ericp\OneDrive\Documents\GitHub\baseball model\over_under_wins.csv')
??writecsv
??write_csv
write.csv(bets, 'over_under_wins.csv')
setwd('C:\Users\ericp\OneDrive\Documents\GitHub\baseball model\daily_betting')
setwd('Users\ericp\OneDrive\Documents\GitHub\baseball model\daily_betting')
setwd('//Users/ericp/OneDrive/Documents/GitHub/baseball model/daily_betting')
write.csv(bets, 'over_under_wins.csv')
setwd("//Users/ericp/OneDrive/Documents/GitHub/baseball model/daily_betting")
setwd("/Users/ericp/OneDrive/Documents/GitHub/baseball model/daily_betting")
write.csv(bets, 'over_under_wins.csv')
BOS_roster <- read_html('https://www.donbest.com/nba/odds')
tables <- BOS_roster %>% html_table(header = TRUE, fill = TRUE)
BOS_roster <- read_html('https://www.oddsportal.com/american-football/usa/nfl/outrights/')
tables <- BOS_roster %>% html_table(header = TRUE, fill = TRUE)
View(tables)
first_table <- tables[[1]]
first_table
first_table <- tables[[2]]
first_table
first_table <- tables[[3]]
first_table
first_table <- tables[[4]]
first_table
first_table <- tables[[5]]
first_table
first_table <- tables[[6]]
first_table
View(first_table)
BOS_roster <- read_html('https://www.oddsportal.com/soccer/england/premier-league/')
tables <- BOS_roster %>% html_table(header = TRUE, fill = TRUE)
View(tables)
first_table <- tables[[1]]
first_table
first_table <- tables[[1]]
first_table
View(first_table)
View(tables)
baseballpress <- read.csv("~/GitHub/baseball model/daily_betting/baseballpress.csv")
View(baseballpress)
lineups <- read.csv("~/GitHub/baseball model/daily_betting/baseballpress.csv")
install.packages(c("broom", "cli", "dtplyr", "fansi", "foreach", "generics", "gert", "glue", "gower", "igraph", "jsonlite", "lightgbm", "magrittr", "nloptr", "pillar", "quantreg", "randomForest", "Rcpp", "RcppArmadillo", "RcppParallel", "readr", "rjson", "rlang", "sparklyr", "testthat", "tidyr", "yaml"))
install.packages(c("broom", "cli", "dtplyr", "fansi", "foreach", "generics", "gert", "glue", "gower", "igraph", "jsonlite", "lightgbm", "magrittr", "nloptr", "pillar", "quantreg", "randomForest", "Rcpp", "RcppArmadillo", "RcppParallel", "readr", "rjson", "rlang", "sparklyr", "testthat", "tidyr", "yaml"))
install.packages(c("broom", "cli", "dtplyr", "fansi", "foreach", "generics", "gert", "glue", "gower", "igraph", "jsonlite", "lightgbm", "magrittr", "nloptr", "pillar", "quantreg", "randomForest", "Rcpp", "RcppArmadillo", "RcppParallel", "readr", "rjson", "rlang", "sparklyr", "testthat", "tidyr", "yaml"))
install.packages(c("broom", "cli", "dtplyr", "fansi", "foreach", "generics", "gert", "glue", "gower", "igraph", "jsonlite", "lightgbm", "magrittr", "nloptr", "pillar", "quantreg", "randomForest", "Rcpp", "RcppArmadillo", "RcppParallel", "readr", "rjson", "rlang", "sparklyr", "testthat", "tidyr", "yaml"))
install.packages(c("broom", "cli", "dtplyr", "fansi", "foreach", "generics", "gert", "glue", "gower", "igraph", "jsonlite", "lightgbm", "magrittr", "nloptr", "pillar", "quantreg", "randomForest", "Rcpp", "RcppArmadillo", "RcppParallel", "readr", "rjson", "rlang", "sparklyr", "testthat", "tidyr", "yaml"))
install.packages(c("broom", "cli", "dtplyr", "fansi", "foreach", "generics", "gert", "glue", "gower", "igraph", "jsonlite", "lightgbm", "magrittr", "nloptr", "pillar", "quantreg", "randomForest", "Rcpp", "RcppArmadillo", "RcppParallel", "readr", "rjson", "rlang", "sparklyr", "testthat", "tidyr", "yaml"))
todays_lineup <- read_html('https://baseballmonster.com/')
